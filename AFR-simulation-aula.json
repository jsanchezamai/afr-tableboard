{
  "swagger": "2.0",
  "info": {
    "description": "Mediante Unity y Visual Studio manejaremos un tablero C# y una capa TS/Angular de visualización multimedia apoyándose en WebVR, WebGL. A su vez, se cocinarán clientes para estaciones de juego y dispositivo de realidad aumentada de forma nativa",
    "version": "0.0.1",
    "title": "AFR Tableboard Simulation aula",
    "termsOfService": "https://github.com/jsanchezamai/afr-tableboard",
    "contact": {
      "email": "jsanchezamai@afr.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "basePath": "/v2",
  "tags": [
    {
      "name": "Simulation Engine",
      "description": "Everything about the simulation tableboard and its connection to multiplexor",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://escrivivir.wordpress.com/a-favor-de-la-revolucion/afr-campus/afr-campus-aula-de-revoluciones/"
      }
    },
    {
      "name": "Multiplexor routes to persistence",
      "description": "Access to multiplexor through sparql query gateway."
    },
    {
      "name": "Multiplexor routes to truth IoT filed",
      "description": "Access to multiplexor through devices and user entities"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/engine/status": {
      "get": {
        "tags": [
          "Simulation Engine"
        ],
        "summary": "Check if the kernel of the engine is working",
        "description": "",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "afr_tableboard_auth": [
              "read:engines"
            ]
          }
        ]
      }
    },
    "/engine": {
      "post": {
        "tags": [
          "Simulation Engine"
        ],
        "summary": "Add an engine",
        "description": "",
        "operationId": "addEngine",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Engine object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Engine"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Engine not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "afr_tableboard_auth": [
              "write:engines",
              "read:engines"
            ]
          }
        ]
      }
    },
    "/engine/all": {
      "get": {
        "tags": [
          "Simulation Engine"
        ],
        "summary": "Find engine All",
        "description": "Returns a single engine",
        "operationId": "getEngineAll",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Engine"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Ening not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/engine/{engineId}": {
      "get": {
        "tags": [
          "Simulation Engine"
        ],
        "summary": "Find engine by ID",
        "description": "Returns a single engine",
        "operationId": "getEngineById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "engineId",
            "in": "path",
            "description": "ID of engine to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Engine"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Ening not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Simulation Engine"
        ],
        "summary": "Updates a engine in the store with form data",
        "description": "",
        "operationId": "updateEngineWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "engineId",
            "in": "path",
            "description": "ID of engine that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the engine",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the engine",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "afr_tableboard_auth": [
              "write:engines",
              "read:engines"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Simulation Engine"
        ],
        "summary": "Deletes a engine",
        "description": "",
        "operationId": "deleteEngine",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "engineId",
            "in": "path",
            "description": "Engine id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid engine value"
          }
        },
        "security": [
          {
            "afr_tableboard_auth": [
              "write:engines",
              "read:engines"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "afr_tableboard_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://github.com/jsanchezamai/afr-tableboard/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:engines": "modify engine status",
        "read:engines": "read engine status"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Engine": {
      "title": "Simulator engine",
      "description": "A engine that can connect to multiplexor-afr and run data",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "int64"
        },
        "lastName": {
          "type": "string",
          "format": "int64"
        },
        "email": {
          "type": "string",
          "format": "int32"
        },
        "password": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "Engine"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "https://escrivivir.wordpress.com/a-favor-de-la-revolucion/afr-campus"
  }
}